diff --git a/include/klee/ExecutionState.h b/include/klee/ExecutionState.h
index 4fa1021..99d7b8f 100644
--- a/include/klee/ExecutionState.h
+++ b/include/klee/ExecutionState.h
@@ -71,6 +71,9 @@ public:
   typedef std::vector< std::pair< std::pair<llvm::Function*, llvm::Function*>, int> > xyjPathType;
   xyjPathType path;
   typedef std::vector<StackFrame> stack_ty;
+  //---xyj count pathsNum in each function
+  std::map<llvm::Function *, int> funcPathsNum;
+  //---
 
 private:
   //fwl added, for symbolic kernel-service
diff --git a/lib/Core/ExecutionState.cpp b/lib/Core/ExecutionState.cpp
index fefcab1..8b44855 100644
--- a/lib/Core/ExecutionState.cpp
+++ b/lib/Core/ExecutionState.cpp
@@ -138,6 +138,9 @@ ExecutionState::ExecutionState(const ExecutionState& state)
     shadowObjects(state.shadowObjects),
     incomingBBIndex(state.incomingBBIndex)
 {
+  //---xyj
+  funcPathsNum = state.funcPathsNum;
+  //---
   for (unsigned int i=0; i<symbolics.size(); i++)
     symbolics[i].first->refCount++;
   //fwl added
diff --git a/lib/Core/Executor.cpp b/lib/Core/Executor.cpp
index 33eacdb..c309e9c 100644
--- a/lib/Core/Executor.cpp
+++ b/lib/Core/Executor.cpp
@@ -262,6 +262,11 @@ namespace {
   MaxMemoryInhibit("max-memory-inhibit",
             cl::desc("Inhibit forking at memory cap (vs. random terminate) (default=on)"),
             cl::init(true));
+
+  cl::opt<int>
+  WarnForks("warn-forks",
+            cl::desc("default=8, means if a function generates too much forks(>=8), you will get a warning on term."),
+            cl::init(8));
 }
 
 
@@ -722,6 +727,30 @@ void Executor::branch(ExecutionState &state,
   unsigned N = conditions.size();
   assert(N);
 
+  //---xyj paths in state.pc's function increased N-1; Then we check is this Function generates too much paths!
+  Instruction *inst = state.prevPC->inst;
+  Function *f = inst->getParent()->getParent();
+  if (state.funcPathsNum.find(f) == state.funcPathsNum.end()) {
+      state.funcPathsNum[f] = N;//equals init to 1, and then add N-1
+  }
+  else {
+      state.funcPathsNum[f] += N-1;
+  }
+  if (state.funcPathsNum[f] >= WarnForks) {
+      klee_message("========================================================");
+      klee_message("[WARNING] [State %d] Function: %s() has generated %d new paths.", \
+                   state.number, f->getName().str().c_str(), state.funcPathsNum[f]);
+      if (MDNode *md = inst->getMetadata("dbg") ) {
+          DILocation Loc(md);
+          unsigned line = Loc.getLineNumber();
+          StringRef file = Loc.getFilename();
+          StringRef dir = Loc.getDirectory();
+          llvm::errs() << "===>>> FILE: " << dir << file << " LINE: " << line << "\n";
+      }
+      klee_message("========================================================");
+  }
+  //---
+
   if (MaxForks!=~0u && stats::forks >= MaxForks) {
     unsigned next = theRNG.getInt32() % N;
     for (unsigned i=0; i<N; ++i) {
@@ -953,6 +982,29 @@ Executor::fork(ExecutionState &current, ref<Expr> condition, bool isInternal) {
 
     return StatePair(0, &current);
   } else {
+      //--xyj: paths in state.pc's function increased 1; Then we check is this Function generates too much paths!
+      Instruction *inst = current.prevPC->inst;
+      Function *f = inst->getParent()->getParent();
+      if (current.funcPathsNum.find(f) == current.funcPathsNum.end()) {
+          current.funcPathsNum[f] = 2;//equals init to 1, and then add 1
+      }
+      else {
+          current.funcPathsNum[f] += 1;
+      }
+      if (current.funcPathsNum[f] >= WarnForks) {
+          klee_message("========================================================");
+          klee_message("[WARNING] [State %d] Function: %s() has generated %d new paths.", \
+                       current.number, f->getName().str().c_str(), current.funcPathsNum[f]);
+          if (MDNode *md = inst->getMetadata("dbg") ) {
+              DILocation Loc(md);
+              unsigned line = Loc.getLineNumber();
+              StringRef file = Loc.getFilename();
+              StringRef dir = Loc.getDirectory();
+              llvm::errs() << "===>>> FILE: " << dir << file << " LINE: " << line << "\n";
+          }
+          klee_message("========================================================");
+      }
+      //---
     TimerStatIncrementer timer(stats::forkTime);
     ExecutionState *falseState, *trueState = &current;
 
