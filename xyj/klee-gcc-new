#!/usr/bin/env python

import os, sys

def isLinkCommand():
	# Look for '-Wl,' as a signal that we are calling the linker. What a hack.
	for arg in sys.argv:
		if arg.startswith('-Wl'):
			return True
		#elif arg.endswith('.o'):
			#return True


def main():
	#pid = os.popen("ps -p %d -oppid=" % os.getppid()).read().strip()
	#ps = os.execvp("ps" , pid) 
	#ps = os.popen("ps -o pid,ppid")
	#ps.readline()	# discard header
	#lines = ps.readlines()
	#print lines
	#ps.close
	f = open("/tmp/tmp.log" , "w")
	ppid=os.getppid()
	#f = open("/proc/%d/cmdline" % ppid)
	#line = f.readline()
	name = os.popen("pstree %d -sa" % ppid) 
	lines = name.readlines()
	for i in lines:
		f.writelines(i)
	f.close()
	#line = str(os.execvp("ps" , ["aux", str(ppid)]))
	for line in lines:
		if line.find("configure") != -1:
			print "configure"
			os.system("gcc " + " ".join(sys.argv[1:]))
			#os.execvp("gcc", [] + sys.argv[1:])
			return 1

	if not isLinkCommand():
		os.execvp("llvm-gcc", ["llvm-gcc", "-emit-llvm"] + sys.argv[1:])
		return 1

	# Otherwise, strip out arguments that llvm-ld doesn't understand. I don't
	# want my previous explicit declaration of hackyness to imply that this bit
	# of code here is not also a complete and total hack, it is.
	args = sys.argv[1:]
	linkArgs = []
	for a in args:
		if a in ('-g', '-W', '-O', '-D', '-f', '-O2',
				'-Wstrict-prototypes', '-Wmissing-prototypes',
				'-fnested-functions', '-pthread'):
			continue
		elif a.startswith('-Wl'):
			continue
		elif a.startswith('-Wall'):
			continue

		linkArgs.append(a)
	
	os.execvp("llvm-ld", ["llvm-ld", "--disable-opt"] + linkArgs)
	return 1

if __name__ == '__main__':
	main()

